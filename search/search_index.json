{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":"<p>hello,</p> you've found my little corner of the internet my own personal \"malleus obliviorum\" stay a while and explore or connect <p>--IAR</p>"},{"location":"#project-showcase","title":"project showcase","text":"<ul> <li>servicenow &gt; jira automation</li> <li>spotify playlist scripts</li> <li>sharepoint storage clean up </li> <li>last.fm multiple users stats</li> </ul>"},{"location":"#about-me","title":"about me","text":"<ul> <li>CV</li> <li>values</li> <li>goals</li> </ul>"},{"location":"iar/","title":"about me","text":"","tags":["IAR"]},{"location":"iar/#meta-about","title":"meta-about","text":"<p>I am a builder. I like to make things and make things better. It's probably why I made this whole site.  </p> <p>I'm also highly conceptual and systematic. It's probably why I got my MLIS. Who else is figuring out how to organize all the details of the world but librarians?</p> <p>So what's better than building something? Building a process. Building a system. It's probably why I work in tech.  </p>","tags":["IAR"]},{"location":"iar/#professional-trajectory","title":"professional trajectory","text":"<pre><code>graph LR\n    A[Dominican University&lt;br&gt;&lt;br&gt;MLIS &amp;lpar;2012&amp;rpar;&lt;br&gt;&lt;br&gt;]\n    B[IMO Health&lt;br&gt;&lt;br&gt;Product Analyst &amp;lpar;2013-2017&amp;rpar;&lt;br&gt;]\n    C[IMO Health&lt;br&gt;&lt;br&gt;Product Manager &amp;lpar;2018-2019&amp;rpar;&lt;br&gt;]\n    D[West Monroe&lt;br&gt;&lt;br&gt;Senior Specialist &amp;lpar;2019-Today&amp;rpar;&lt;br&gt;]\n\n    A --- B\n        subgraph IMO\n            B --- C\n        end\n    C --- D\n</code></pre>","tags":["IAR"]},{"location":"iar/#education","title":"education","text":"<ul> <li>Masters of Library &amp; Information Science | Dominican University | 2012</li> <li>BA Sociology | Wheaton College (IL) | 2008</li> </ul>","tags":["IAR"]},{"location":"iar/#skills-capabilities-etc","title":"skills, capabilities, etc","text":"<ul> <li>Software Development<ul> <li>API Integration</li> <li>Azure Apps</li> <li>CSS</li> <li>Data Modeling and ETL</li> <li>HTML</li> <li>JavaScript</li> <li>M365 Power Platform</li> <li>PowerShell</li> <li>SQL</li> </ul> </li> <li>Pragmatic Marketing Certified<ul> <li>Foundations</li> <li>Focus</li> <li>Launch</li> <li>Build</li> <li>Price</li> </ul> </li> <li>Systems Administration<ul> <li>ServiceNow</li> <li>Atlassian</li> <li>M365</li> </ul> </li> <li>DJing</li> <li>Being a huge music nerd</li> </ul>","tags":["IAR"]},{"location":"kbindex/","title":"knowledge base","text":"<p>home for my thoughts, notes, ideas, and concepts</p>"},{"location":"kbindex/#knowledge-by-actionability","title":"knowledge by actionability","text":"projectsareasresourcesarchive <ul> <li>last.fm user stats</li> <li>NOBLE CREATURE</li> <li>initial thoughts on this site</li> <li>sharepoint admin work</li> <li>slack migration automation</li> <li>new Jira project automation from ServiceNow</li> <li>spotify auto playlists</li> </ul> <ul> <li>malleus obliviorum</li> <li>music</li> </ul> <ul> <li>CI/CD</li> <li>CODE method</li> <li>the cult of done</li> <li>deleuze</li> <li>markdown and mkdocs notes</li> <li>PARA</li> </ul>"},{"location":"kbindex/#knowledge-by-tags","title":"knowledge by tags","text":"<pre><code>* (under construction)\n</code></pre>"},{"location":"kbindex/#create-new-knowledge-base-page-quick-links","title":"create new knowledge base page quick links:","text":"<p> Project Area Resource Archive Markdown file properties template<pre><code>---\ntitle: TITLE\nlayout: template\nfilename: FILENAME\ntags:\n    - TAGS\n---\n</code></pre>"},{"location":"areas/malleus-obliviorum/","title":"malleus obliviorum","text":"","tags":["knowledge","information","data","documentation"]},{"location":"areas/malleus-obliviorum/#whats-in-a-name","title":"What's in a name?","text":"<p>Malleus Obliviorum can be understood as latin for: The Hammer of Forgetfulness.</p> <p>As a person with ADHD, a tool that can \"destroy\" forgetfulness is highly desirable, and something I've been trying to build for a long time. Also, everyone knows that a pretentious latin name is fun and makes you sound fancy.</p> <p>The goal is for this to be something of a \"zettelkasten\" or \"second brain\", but in my own way, and in my own style. And while the whole will never be complete, this format allows for small slices of creativey and action to be published and thus considered 'done'.   </p>","tags":["knowledge","information","data","documentation"]},{"location":"areas/malleus-obliviorum/#caveat","title":"caveat","text":"<p>It is worth acknowledging that the Malleus Maleficarum (from which this name takes inspiration) was a notorious book on witchcraft from the 15th century. There is some debate still on the actual impact of the treatise as it was never adopted officially by the Catholic Inquisition, regardless, it represents a fearful and patriarchal engagement with the (unfamiliar) supernatural world. Rather than an affirmation of such a regressive worldview, it is my goal for this tool to be a holistic and inclusive resource.</p>","tags":["knowledge","information","data","documentation"]},{"location":"areas/music/","title":"music","text":"","tags":["art","creativity"]},{"location":"areas/music/#listening","title":"listening","text":"<p>I'm a musical omnivore and love making making playlists for all vibes, seasons, and situations. </p>","tags":["art","creativity"]},{"location":"areas/music/#lastfm","title":"Last.fm","text":"<ul> <li>I started seriously tracking my listening with Last.fm in 2018 and my profile is getting close to that 200k scrobbles mark.</li> <li>I've also made a couple HTML pages for sharing Last.fm listening with friends/family. Details here. </li> </ul>","tags":["art","creativity"]},{"location":"areas/music/#my-stuff","title":"my stuff","text":"<ul> <li>DJ Mixes:<ul> <li>Nightcap (A fairly stupid yet fun hip-hop/party/bass music mix that I slapped together in an evening)</li> <li>Going West (Western themed mix. Way too high concept but I love it.)</li> <li>Advent (A musical journey of despair, depression and hope that evokes my own experiences around the Advent season.)</li> <li>Older mixes: I think they're buried in my Google Drive somewhere. I should post those somewhere...TBD</li> </ul> </li> <li>Remixes:</li> </ul>","tags":["art","creativity"]},{"location":"projects/lastfm/","title":"last.fm user stats","text":"","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#who","title":"Who:","text":"<p>A group of people who want to keep up with what everyone is listening to. </p>","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#what","title":"What:","text":"<p>A way to see everyone's recent scrobbles in one view. A single webpage that displays multiple user's info.</p>","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#why","title":"Why:","text":"<p>Music is better when shared. As we all live more of our lives digitally and as friends move across the country, staying connected is even more a priority. </p>","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#project-webpages","title":"Project Webpages","text":"","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#me-and-the-boys-recent-scrobbles-and-stats","title":"Me and the boy's recent scrobbles and stats","text":"","tags":["HTML","CSS","APIs"]},{"location":"projects/lastfm/#family-scrobbles-and-stats","title":"Family scrobbles and stats","text":"","tags":["HTML","CSS","APIs"]},{"location":"projects/noble-creature/","title":"NOBLE CREATURE","text":"<p>I whispered again, saying, \u201cPeace to you. Peace of Christ to you, noble creature.\u201d -Kelvin Liu (Source)</p>","tags":["music"]},{"location":"projects/noble-creature/#what-is-a-noble-creature","title":"What is a NOBLE CREATURE?","text":"<p>Guttural. Instinctual. Intrinsic. Graceful. Responsive and adaptive. Lean.</p> <p>Dropbox Link</p>","tags":["music"]},{"location":"projects/noble-creature/#content","title":"content","text":"trackspractices","tags":["music"]},{"location":"projects/portfolio/","title":"design","text":"<ul> <li>I want to have my initials as a PNG with transparent background centered, then scroll down slightly to have maybe a couple boxes cover it?</li> <li>also I really like the idea of a monospaced serif font</li> <li>introductory text should be minimal:<ul> <li>hello, you've found my little corner of the Internet. </li> <li>list projects that I have repos for? Spotify playlist, maybe some SharePoint powershell scripts? how could I demonstrate my work on the Snow&lt;&gt;Jira integration?</li> <li>ohhh maybe I could format each project as almost a super light agile documentation example using the who what why to describe and then describe/show results. any code could be linked </li> </ul> </li> </ul>","tags":["WIP"]},{"location":"projects/portfolio/#to-do","title":"to do","text":"<ul> <li>more project pages<ul> <li>SNOW&lt;&gt;JIRA integration</li> <li>sharepoint shenanigans<ul> <li>custom list stuff</li> <li>PNP search</li> </ul> </li> </ul> </li> <li>I need visuals for my project pages!<ul> <li>Spotify: script running gif</li> </ul> </li> </ul>","tags":["WIP"]},{"location":"projects/sharepoint/","title":"sharepoint admin work","text":"<p>In my time as a SharePoint admin I got to work on quite a few interesting projects and it was in this work that I started to love writing PowerShell scripts to automate...well...anything!</p>","tags":["admin"]},{"location":"projects/sharepoint/#sharepoint-storage-cleanup","title":"SharePoint storage cleanup","text":"","tags":["admin"]},{"location":"projects/sharepoint/#who","title":"Who:","text":"<p>My company who was looking at spending another ~!$10k for more SharePoint storage.</p>","tags":["admin"]},{"location":"projects/sharepoint/#what","title":"What:","text":"<p>Freeing up storage space in our SharePoint tenant. </p>","tags":["admin"]},{"location":"projects/sharepoint/#why","title":"Why:","text":"<p>Saving money! Since we paid a flat fee for our storage at $0.16 (16 cents) per GB of cloud storage per month ($0.16/GB/MON) I had an easy way to calculate metric to measure the success of this project.</p>","tags":["admin"]},{"location":"projects/sharepoint/#file-versioning","title":"File versioning:","text":"<p>SharePoint's file versioning is great, but my company had left file versioning on and without limit for YEARS.   </p>","tags":["admin"]},{"location":"projects/sharepoint/#powershell-solution","title":"PowerShell solution:","text":"<p>sharepoint-version-history-cleanup.ps1 </p> This script does quite a few things: <ol> <li>Start with a CSV file of all the sites you want to scan (I found it easier to track all the sites and results in excel, but no reason this too couldn't be   scripted out)</li> <li>Set the \"versions to keep\" variables:<ol> <li>Default number (this will set the library limit as well)</li> <li>Archived versions to keep (see below for how 'archive' folders work)</li> <li>Versions to keep based on age of file:<ol> <li>5 years or older</li> <li>2 years or older</li> <li>1 year or older</li> </ol> </li> </ol> </li> <li>Looping through ALL the sites listed in the CSV file:<ol> <li>Connect to the site with PNP PowerShell</li> <li>Get all libraries (with some exclusions) and then loop through all of those:<ol> <li>Set the library version limit (the Default number from above)</li> <li>Get ALL DOCUMENTS in that library and then loop through those:<ol> <li>Set a variable for the number of versions each file has as well as the last modified date</li> <li>Process all the \"versions to keep\" logic applying the variables from above:<ol> <li>if the file path includes \"archive\"</li> <li>elseif the file is older than 5 years</li> <li>elseif the file is older than 2 years</li> <li>elseif the file is oder than 1 year</li> <li>else use the default number</li> </ol> </li> <li>Check if the file has more versions than the \"version to keep\" variable selected with the logic and if TRUE:</li> <li>Loop through all versions of the file for the count of \"current versions\" minus \"versions to keep\":<ol> <li></li> </ol> </li> </ol> </li> </ol> </li> </ol> </li> <li>Final step is to export the logged results from all previous steps.</li> </ol>","tags":["admin"]},{"location":"projects/sharepoint/#results","title":"Results:","text":"<p>The final version of this script took months to finalize, and a particularly gnarly eDiscovery hold issue prevented me from running this script on all sites for quite a while as well. However by December of that year I had the following results to brag about: </p>","tags":["admin"]},{"location":"projects/slack/","title":"slack migration automation","text":"","tags":["admin","APIs"]},{"location":"projects/slack/#who","title":"Who:","text":"<p>IT Admin Team in charge slack (me and my team) and then 200+ new employees from an acquisition</p>","tags":["admin","APIs"]},{"location":"projects/slack/#what","title":"What:","text":"<p>Automate the moving, archiving, and renaming of hundreds of Slack channels from the acquired company's Slack instance.</p>","tags":["admin","APIs"]},{"location":"projects/slack/#why","title":"Why:","text":"<p>The acquired company had a rich history of using Slack and many years of content they relied on as historical reference. Rather than lose all of it, we integrated their instance into ours, and rather than doing all the moving, archiving, and renaming manually, I automated those steps using Slack APIs in PowerShell.</p>","tags":["admin","APIs"]},{"location":"projects/slack/#the-scripts","title":"The scripts:","text":"<ol> <li>bulk-archive-channels.ps1</li> <li>bulk-move-channels.ps1</li> <li>bulk-rename-channels.ps1</li> </ol>","tags":["admin","APIs"]},{"location":"projects/snow-jira/","title":"new Jira project automation from ServiceNow","text":"","tags":["JavaScript","APIs","ServiceNow","Jira"]},{"location":"projects/snow-jira/#who","title":"Who:","text":"<p>Jira users who want new projects created for them, and the IT team who admins Jira.</p>","tags":["JavaScript","APIs","ServiceNow","Jira"]},{"location":"projects/snow-jira/#what","title":"What:","text":"<p>An automated process to spin up new Jira Projects for end users based on a few inputs in ServiceNow.</p>","tags":["JavaScript","APIs","ServiceNow","Jira"]},{"location":"projects/snow-jira/#why","title":"Why:","text":"<p>Creating new Jira projects requires Admin credentials so end users couldn't perform the task themselves, but in a mid-sized company IT was getting daily requests for this process. A standard request required tedious manual work by IT and the end users would have to wait for IT to get to the task. In busy seasons end users could end up waiting hours or even days for the results of fairly straightforward request. Automation gives end users immediate project creation and removes IT intervention from all but trouble shooting.</p>","tags":["JavaScript","APIs","ServiceNow","Jira"]},{"location":"projects/snow-jira/#automation-overview","title":"Automation Overview:","text":"<ul> <li>ServiceNow:<ul> <li>Custom service portal form</li> <li>API integration of Jira credentials</li> <li>Custom workflow:<ul> <li>Formats response of form</li> <li>Validates requester has valid Jira license</li> <li>API calls to Jira:<ul> <li>Create Jira Project</li> <li>Add requester as Owner of Project</li> <li>Create Jira filter</li> <li>Create Project Board with new filter</li> </ul> </li> </ul> </li> <li>Notifications:<ul> <li>To end user with link to their new Project</li> <li>To IT team notifying them of another successful run</li> </ul> </li> </ul> </li> </ul>","tags":["JavaScript","APIs","ServiceNow","Jira"]},{"location":"projects/spotify/","title":"spotify auto playlists","text":"","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#who","title":"Who:","text":"<p>Myself! A massive music nerd who listens to a lot of music and takes pride in my many Spotify playlists.</p>","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#what","title":"What:","text":"<p>A script that queries a specific Subreddit, finds posts with Spotify links, then processes those URLs adding any new tracks to my relevant Spotify playlist.</p>","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#why","title":"Why:","text":"<p>I've spent countless nights of my life searching for music. Even when I first figured out Reddit's APIs and started generating spreadsheets of Spotify URLs it would still take me a couple hours every month to stay current on the new tunes. By fully scripting the process it's easier than ever to stay up-to-date on any number of genres and my playlists get populated in seconds.</p>","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#project-scripts","title":"Project Scripts","text":"","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#auto-list-creator","title":"Auto List Creator","text":"<p>Input a subreddit and have it create a brand new playlist based upon all the Spotify links posted there. Set variables for minimum allowed upvotes or how far back to scan for results.</p>","tags":["PowerShell","APIs"]},{"location":"projects/spotify/#firehouse-fresh-auto-updater","title":"Firehouse Fresh Auto Updater","text":"<p>Updates my existing set of Firehouse playlists with any new songs posted to the subreddit since the last time I ran the script.</p>","tags":["PowerShell","APIs"]},{"location":"resources/cicd/","title":"CI/CD","text":"<p>CI/CD stands for continuous integration and continuous delivery or deployment. It's a series of practices that help software development teams deliver code changes more frequently and reliably: Continuous integration (CI): Developers frequently merge code changes into a shared repository, where automated builds and tests run. This helps identify issues early. Continuous delivery (CD): Automatically deploys code changes to a testing or production environment after the build stage.</p>"},{"location":"resources/code/","title":"CODE method","text":"<p>The \"CODE\" method by Tiago Forte is a structured approach to building a \u201csecond brain\u201d through effective note-taking and digital organization. It stands for Capture, Organize, Distill, and Express and is designed to make knowledge more accessible and useful.</p> <ul> <li>Capture: Keep what's useful and resonates with you<ul> <li>What are the recurring themes and questions that I always seem to return to in my work and life?</li> <li>What insightful, high-value, impactful information do I already have access to that could be valuable?</li> <li>Which knowledge do I want to interconnect, mix and match, and periodically resurface to stimulate future thinking on these subjects</li> </ul> </li> <li>Organize: Save information for actionability<ul> <li>Extract the most valuable pieces of information from what you've captured. This means condensing content to essential takeaways and highlighting the insights most relevant to you. The idea is to reduce cognitive load when reviewing notes and focus on what matters most.</li> </ul> </li> <li>Distill: Find the essence of an idea to communicate it more effectively</li> <li>Express: Use your second brain to combine knowledge and create something new</li> </ul> <p>Reference link</p>","tags":["documentation"]},{"location":"resources/cult-of-done/","title":"the cult of done","text":"<p>I love and loath this. Perhaps I'm afraid of what it implies. The primary caveat I have is that it assumes \"done\" as the goal/good and doesn't give much in ways of an argument for \"done\". Which is fine. There is enough here to enjoy and benefit from without having to answer: What is the point of being done?</p> <p>Specifically for creative activities, I consider this manifesto incredibly helpful:</p>","tags":["philosophy"]},{"location":"resources/cult-of-done/#the-manifesto","title":"the manifesto","text":"<p>Credit to the authors: Bre Pettis &amp; Kio Stark </p> <ol> <li>There are three states of being. Not knowing, action and completion.</li> <li>Accept that everything is a draft. It helps to get it done.</li> <li>There is no editing stage.</li> <li>Pretending you know what you\u2019re doing is almost the same as knowing what you are doing, so just accept that you know what you\u2019re doing even if you don\u2019t and do it.</li> <li>Banish procrastination. If you wait more than a week to get an idea done, abandon it.</li> <li>The point of being done is not to finish but to get other things done.</li> <li>Once you\u2019re done you can throw it away.</li> <li>Laugh at perfection. It\u2019s boring and keeps you from being done.</li> <li>People without dirty hands are wrong. Doing something makes you right.</li> <li>Failure counts as done. So do mistakes.</li> <li>Destruction is a variant of done.</li> <li>If you have an idea and publish it on the internet, that counts as a ghost of done.</li> <li>Done is the engine of more.</li> </ol>","tags":["philosophy"]},{"location":"resources/cult-of-done/#the-visual","title":"the visual","text":"<p>Credit to the artist: James Provost </p>","tags":["philosophy"]},{"location":"resources/deleuze/","title":"Deleuze","text":"<p>title: deleuze layout: template filename: deleuze.md tags:     - philosophy</p>"},{"location":"resources/deleuze/#difference-repetition","title":"Difference &amp; Repetition","text":"<p>\"for Deleuze difference is always an affirmation, where as opposition is a negative\" \"difference is affirmative, opposition is negative\"</p>"},{"location":"resources/deleuze/#anti-oedipus","title":"anti-oedipus","text":"<p>Deleuze and Guattari's Anti-Oedipus (1972) critiques psychoanalytic theories centered on the Oedipus complex and offers an alternative model for understanding desire, society, and subjectivity. The title reflects their opposition to the Freudian framework, which they saw as reductive and repressive, particularly in how it ties desire to familial structures. Here's an outline of their critique and alternative:</p> <p>Why \"Anti-Oedipus\"?</p> <ol> <li>Critique of the Oedipus Complex:</li> </ol> <p>The Oedipus complex frames desire through a familial triangle (mother, father, child), which Deleuze and Guattari argue imposes a narrow, culturally specific narrative onto universal human experiences.</p> <p>They see this model as a form of repression, channeling the complexity of desire into a moralistic and restrictive framework that serves societal control.</p> <ol> <li>Psychoanalysis as a Tool of Control:</li> </ol> <p>They argue that psychoanalysis reinforces capitalist and patriarchal systems by individualizing problems and pathologizing deviations from \"normal\" family structures.</p> <p>The focus on the nuclear family distracts from broader social, political, and economic forces shaping subjectivity.</p> <ol> <li>Desire as Productive and Social:</li> </ol> <p>For Deleuze and Guattari, desire is not a lack (as Freud posits) but a productive, creative force that operates beyond familial or individual confines.</p> <p>Their Alternative: Schizoanalysis</p> <ol> <li>Desiring-Machines:</li> </ol> <p>They propose the concept of \"desiring-machines\" to describe how desire functions as a process of connection, flow, and production. Desire operates through assemblages, linking various entities, materials, and forces.</p> <p>These \"machines\" are not confined to individual psyches but are part of broader social and material systems.</p> <ol> <li>Anti-repressive Approach:</li> </ol> <p>Schizoanalysis seeks to free desire from the confines of Oedipal and capitalist structures, allowing it to flow more freely and express itself creatively.</p> <ol> <li>The Body Without Organs (BwO):</li> </ol> <p>They introduce the concept of the BwO, a metaphor for a body that resists hierarchical organization and embraces a fluid, dynamic state. It is a way of thinking about desire, subjectivity, and creativity outside fixed identities or roles.</p> <ol> <li>Political Dimension of Desire:</li> </ol> <p>Desire is inherently political. They argue that capitalist systems exploit and channel desire into consumerism and conformity. Schizoanalysis aims to uncover these processes and create new ways of being.</p> <ol> <li>Schizophrenia as a Model:</li> </ol> <p>They use schizophrenia metaphorically (not as a clinical condition) to describe a way of being that resists fixed identities and embraces multiplicity, flow, and creativity. It serves as a counterpoint to the rigid, hierarchical structures imposed by Oedipal and capitalist frameworks.</p> <p>Key Takeaways:</p> <p>Anti-Oedipus is an attempt to dismantle psychoanalytic and societal frameworks that reduce human desire to narrow, repressive models. Deleuze and Guattari advocate for an expansive, productive understanding of desire that emphasizes freedom, creativity, and connection to broader social forces. Schizoanalysis, their proposed alternative, seeks to uncover and unleash these possibilities.</p>"},{"location":"resources/mkdocs-material/","title":"Markdown and Mkdocs notes","text":"","tags":["documentation"]},{"location":"resources/mkdocs-material/#quick-reference-external","title":"quick reference (external)","text":"<ul> <li>Mkdocs user guide </li> <li>Material for Mkdocs reference</li> <li>Markdown Guides:<ul> <li>Basic Syntax</li> <li>Extended Syntax</li> </ul> </li> </ul>","tags":["documentation"]},{"location":"resources/mkdocs-material/#local-server-for-dev-work","title":"local server for dev work","text":"run terminal at root folder (./GitHub/malleus-obliviorum)<pre><code>.\\venv\\Scripts\\activate\npython -m mkdocs serve\n</code></pre>","tags":["documentation"]},{"location":"resources/mkdocs-material/#cli-git-process","title":"CLI git process","text":"add, commit, and push<pre><code>git add .\ngit commit -m \"Your commit message here\"\ngit push origin main\n::\n:: OR...just use the bat file I made\n::\ncommitToGitHub.bat 'commitYour commit message here' \n</code></pre>","tags":["documentation"]},{"location":"resources/mkdocs-material/#deploying-to-github","title":"deploying to GitHub","text":"<p>All handled by GitHub actions with current set up. Should run with every commit to the repo.</p> Language Shortcodes <ul> <li>Cucumber ('*.feature')</li> <li>abap ('*.abap')</li> <li>ada ('.adb', '.ads', '*.ada')</li> <li>ahk ('.ahk', '.ahkl')</li> <li>apacheconf ('.htaccess', 'apache.conf', 'apache2.conf')</li> <li>applescript ('*.applescript')</li> <li>as ('*.as')</li> <li>as3 ('*.as')</li> <li>asy ('*.asy')</li> <li>bash ('.sh', '.ksh', '.bash', '.ebuild', '*.eclass')</li> <li>bat ('.bat', '.cmd')</li> <li>befunge ('*.befunge')</li> <li>blitzmax ('*.bmx')</li> <li>boo ('*.boo')</li> <li>brainfuck ('.bf', '.b')</li> <li>c ('.c', '.h')</li> <li>cfm ('.cfm', '.cfml', '*.cfc')</li> <li>cheetah ('.tmpl', '.spt')</li> <li>cl ('.cl', '.lisp', '*.el')</li> <li>clojure ('.clj', '.cljs')</li> <li>cmake ('*.cmake', 'CMakeLists.txt')</li> <li>coffeescript ('*.coffee')</li> <li>console ('*.sh-session')</li> <li>control ('control')</li> <li>cpp ('.cpp', '.hpp', '.c++', '.h++', '.cc', '.hh', '.cxx', '.hxx', '*.pde')</li> <li>csharp ('*.cs')</li> <li>css ('*.css')</li> <li>cython ('.pyx', '.pxd', '*.pxi')</li> <li>d ('.d', '.di')</li> <li>delphi ('*.pas')</li> <li>diff ('.diff', '.patch')</li> <li>dpatch ('.dpatch', '.darcspatch')</li> <li>duel ('.duel', '.jbst')</li> <li>dylan ('.dylan', '.dyl')</li> <li>erb ('*.erb')</li> <li>erl ('*.erl-sh')</li> <li>erlang ('.erl', '.hrl')</li> <li>evoque ('*.evoque')</li> <li>factor ('*.factor')</li> <li>felix ('.flx', '.flxh')</li> <li>fortran ('.f', '.f90')</li> <li>gas ('.s', '.S')</li> <li>genshi ('*.kid')</li> <li>gitignore ('.gitignore')</li> <li>glsl ('.vert', '.frag', '*.geo')</li> <li>gnuplot ('.plot', '.plt')</li> <li>go ('*.go')</li> <li>groff ('.(1234567)', '.man')</li> <li>haml ('*.haml')</li> <li>haskell ('*.hs')</li> <li>html ('.html', '.htm', '.xhtml', '.xslt')</li> <li>hx ('*.hx')</li> <li>hybris ('.hy', '.hyb')</li> <li>ini ('.ini', '.cfg')</li> <li>io ('*.io')</li> <li>ioke ('*.ik')</li> <li>irc ('*.weechatlog')</li> <li>jade ('*.jade')</li> <li>java ('*.java')</li> <li>js ('*.js')</li> <li>jsp ('*.jsp')</li> <li>lhs ('*.lhs')</li> <li>llvm ('*.ll')</li> <li>logtalk ('*.lgt')</li> <li>lua ('.lua', '.wlua')</li> <li>make ('.mak', 'Makefile', 'makefile', 'Makefile.', 'GNUmakefile')</li> <li>mako ('*.mao')</li> <li>maql ('*.maql')</li> <li>mason ('.mhtml', '.mc', '*.mi', 'autohandler', 'dhandler')</li> <li>markdown ('*.md')</li> <li>modelica ('*.mo')</li> <li>modula2 ('.def', '.mod')</li> <li>moocode ('*.moo')</li> <li>mupad ('*.mu')</li> <li>mxml ('*.mxml')</li> <li>myghty ('*.myt', 'autodelegate')</li> <li>nasm ('.asm', '.ASM')</li> <li>newspeak ('*.ns2')</li> <li>objdump ('*.objdump')</li> <li>objectivec ('*.m')</li> <li>objectivej ('*.j')</li> <li>ocaml ('.ml', '.mli', '.mll', '.mly')</li> <li>ooc ('*.ooc')</li> <li>perl ('.pl', '.pm')</li> <li>php ('.php', '.php(345)')</li> <li>postscript ('.ps', '.eps')</li> <li>pot ('.pot', '.po')</li> <li>pov ('.pov', '.inc')</li> <li>prolog ('.prolog', '.pro', '*.pl')</li> <li>properties ('*.properties')</li> <li>protobuf ('*.proto')</li> <li>py3tb ('*.py3tb')</li> <li>pytb ('*.pytb')</li> <li>python ('.py', '.pyw', '.sc', 'SConstruct', 'SConscript', '.tac')</li> <li>r ('*.R')</li> <li>rb ('.rb', '.rbw', 'Rakefile', '.rake', '.gemspec', '.rbx', '.duby')</li> <li>rconsole ('*.Rout')</li> <li>rebol ('.r', '.r3')</li> <li>redcode ('*.cw')</li> <li>rhtml ('*.rhtml')</li> <li>rst ('.rst', '.rest')</li> <li>sass ('*.sass')</li> <li>scala ('*.scala')</li> <li>scaml ('*.scaml')</li> <li>scheme ('*.scm')</li> <li>scss ('*.scss')</li> <li>smalltalk ('*.st')</li> <li>smarty ('*.tpl')</li> <li>sourceslist ('sources.list')</li> <li>splus ('.S', '.R')</li> <li>sql ('*.sql')</li> <li>sqlite3 ('*.sqlite3-console')</li> <li>squidconf ('squid.conf')</li> <li>ssp ('*.ssp')</li> <li>tcl ('*.tcl')</li> <li>tcsh ('.tcsh', '.csh')</li> <li>tex ('.tex', '.aux', '*.toc')</li> <li>text ('*.txt')</li> <li>v ('.v', '.sv')</li> <li>vala ('.vala', '.vapi')</li> <li>vbnet ('.vb', '.bas')</li> <li>velocity ('.vm', '.fhtml')</li> <li>vim ('*.vim', '.vimrc')</li> <li>xml ('.xml', '.xsl', '.rss', '.xslt', '.xsd', '.wsdl')</li> <li>xquery ('.xqy', '.xquery')</li> <li>xslt ('.xsl', '.xslt')</li> <li>yaml ('.yaml', '.yml')</li> </ul>","tags":["documentation"]},{"location":"resources/para/","title":"PARA","text":"<p>The acronym \"PARA\" stands for: projects areas resources archive  </p> <p>and is used by someone creating documentation to quickly sort and categorize content by level of actionablity</p>","tags":["documentation","second-brain"]}]}